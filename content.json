{"meta":{"title":"MemoryOverFlow","subtitle":"我的自留地","description":"随便写点啥","author":"Qu Lei","url":"http://qulei.online"},"pages":[{"title":"about","date":"2019-01-30T06:59:47.000Z","updated":"2019-01-30T06:59:47.809Z","comments":true,"path":"about/index.html","permalink":"http://qulei.online/about/index.html","excerpt":"","text":""},{"title":"tags","date":"2019-01-30T06:46:27.000Z","updated":"2019-01-30T06:57:45.271Z","comments":true,"path":"tags/index.html","permalink":"http://qulei.online/tags/index.html","excerpt":"","text":""},{"title":"categories","date":"2019-01-30T06:58:18.000Z","updated":"2019-01-31T01:36:42.193Z","comments":true,"path":"categories/index.html","permalink":"http://qulei.online/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"PostMan使用教程","slug":"PostMan使用教程","date":"2019-10-16T07:40:27.000Z","updated":"2019-10-16T07:53:47.635Z","comments":true,"path":"2019/10/16/PostMan使用教程/","link":"","permalink":"http://qulei.online/2019/10/16/PostMan使用教程/","excerpt":"","text":"PostMan 教程 最强PostMan使用教程（1） - 入门 最强PostMan使用教程（2） - 在test suite中运行test case Postman使用小技巧 - 用Postman生成Request代码 用postman快速学习ElasticSearch的搜索功能 最强PostMan使用教程（3）- script 最强PostMan使用教程（4）- 使用Postman的模拟服务模拟（mock）后端 最强PostMan使用教程（5）- 工作协同：使用Postman生成接口文档和示例 最强PostMan使用教程（6）- 使用Postman导入swagger OPEN API 最强PostMan使用教程（7）postman做数字签名认证","categories":[{"name":"PostMan","slug":"PostMan","permalink":"http://qulei.online/categories/PostMan/"}],"tags":[{"name":"PostMan","slug":"PostMan","permalink":"http://qulei.online/tags/PostMan/"},{"name":"教程","slug":"教程","permalink":"http://qulei.online/tags/教程/"}]},{"title":"GIT 放弃本地修改","slug":"GIT-放弃本地修改","date":"2019-02-15T02:21:11.000Z","updated":"2019-02-15T02:58:12.909Z","comments":true,"path":"2019/02/15/GIT-放弃本地修改/","link":"","permalink":"http://qulei.online/2019/02/15/GIT-放弃本地修改/","excerpt":"","text":"如果在修改时发现修改错误，而要放弃本地修改时 未使用 git add 缓存代码时 可以使用 git checkout – filepathname (比如： git checkout – readme.md ，不要忘记中间的 “–” ，不写就成了检出分支了！！)。放弃所有的文件修改可以使用 git checkout . 命令。此命令用来放弃掉所有还没有加入到缓存区（就是 git add 命令）的修改：内容修改与整个文件删除。但是此命令不会删除掉刚新建的文件。因为刚新建的文件还没已有加入到 git 的管理系统中。所以对于git是未知的。自己手动删除就好了。 已经使用了 git add 缓存了代码 可以使用 git reset HEAD filepathname （比如： git reset HEAD readme.md）来放弃指定文件的缓存，放弃所以的缓存可以使用 git reset HEAD . 命令。此命令用来清除 git 对于文件修改的缓存。相当于撤销 git add 命令所在的工作。在使用本命令后，本地的修改并不会消失，而是回到了如（一）所示的状态。继续用（一）中的操作，就可以放弃本地的修改。 已经用 git commit 提交了代码 可以使用 git reset –hard HEAD^ 来回退到上一次commit的状态。此命令可以用来回退到任意版本：git reset –hard commitid 可以使用 git log 命令来查看git的提交历史。git log 的输出如下,之一这里可以看到第一行就是 commitid： commit 8aadf6f2908fa0a9278498368619e43923f27dd8 (HEAD -&gt; feature/1.0.4, origin/feature/1.0.4) Author: ****** Date: Wed Feb 13 11:19:17 2019 +0800 删掉无用代码 commit d8261f135ced41abcb6d595f625c613e76d91fa7 Author: ****** Date: Fri Jan 25 18:07:24 2019 +0800 对接管理平台 commit 2983d6e1a812800f17671cc7463e7b6ba47c48fb Author: ****** Date: Mon Jan 21 15:35:12 2019 +0800 对接管理平台 commit 6483b498d9b2436ad79119b5b6fdb5ffcf9c0360 (origin/develop, develop) Merge: 5ea0783 85bdac7 Author: ****** Date: Thu Jan 3 10:00:00 2019 +0800 可以看出现在的状态在 commitid 为 8aadf6f2908fa0a9278498368619e43923f27dd8 的提交上（有 HEAD -&gt; feature/1.0.4 标记）。","categories":[{"name":"git","slug":"git","permalink":"http://qulei.online/categories/git/"}],"tags":[{"name":"git","slug":"git","permalink":"http://qulei.online/tags/git/"}]},{"title":"Python函数参数","slug":"Python函数参数","date":"2019-02-13T09:13:39.000Z","updated":"2019-02-15T05:55:45.038Z","comments":true,"path":"2019/02/13/Python函数参数/","link":"","permalink":"http://qulei.online/2019/02/13/Python函数参数/","excerpt":"","text":"函数参数位置参数def person(name, age): print(&apos;name:&apos;, name, &apos;age:&apos;, age) 默认参数def person1(name, age, location=&apos;beijing&apos;): print(&apos;name:&apos;, name, &apos;age:&apos;, age, &apos;location&apos;, location) 可变参数关键字参数def person2(name, age, **kw): print(&apos;name:&apos;, name, &apos;age:&apos;, age, &apos;other:&apos;, kw) 命名关键字参数def person3(name, age, *, city, job): print(name, age, city, job) 参数定义的顺序必须是：必选参数、默认参数、可变参数、命名关键字参数和关键字参数。","categories":[{"name":"python","slug":"python","permalink":"http://qulei.online/categories/python/"}],"tags":[{"name":"python","slug":"python","permalink":"http://qulei.online/tags/python/"},{"name":"python函数","slug":"python函数","permalink":"http://qulei.online/tags/python函数/"}]},{"title":"first practice","slug":"first","date":"2019-01-28T15:34:06.000Z","updated":"2019-02-01T09:42:20.178Z","comments":true,"path":"2019/01/28/first/","link":"","permalink":"http://qulei.online/2019/01/28/first/","excerpt":"","text":"欢迎来到hexo!这是你的第一篇博文。 Java入门从Hello World开始下面是列表项 line1 line2 line3来一段经典代码吧 段落一 小段一 段落二 小段二 段落一 区块标记一 段落二 区块标记二 姓名 年龄 性别 张三 18 男22342342 表头 条目一 条目二 项目 项目一 项目二 fun (x: Int, y: Int): Int { return x + y} public static void main(String[] args){ System.out.println(“Hello World”);} 这是一个普通段落： 这是一个代码区块。 &lt;div class=&quot;footer&quot;&gt; &amp;copy; 2004 Foo Corporation &lt;/div&gt; 点击这里,去到百度点击这里,去到腾讯 This is an example has title This is an example has no title See my about page for deatils 结语谢谢使用Hexo","categories":[{"name":"hexo","slug":"hexo","permalink":"http://qulei.online/categories/hexo/"}],"tags":[{"name":"hello","slug":"hello","permalink":"http://qulei.online/tags/hello/"},{"name":"demo","slug":"demo","permalink":"http://qulei.online/tags/demo/"}]},{"title":"Hexo 之 Hello World","slug":"hello-world","date":"2019-01-24T07:31:19.449Z","updated":"2019-10-16T07:57:11.099Z","comments":true,"path":"2019/01/24/hello-world/","link":"","permalink":"http://qulei.online/2019/01/24/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}